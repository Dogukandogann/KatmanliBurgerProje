@using KatmanliBurger_DATA.Concretes;
@model OrderListViewModel
@{
	Layout = null;
}

<!DOCTYPE html>
<html>

@await Component.InvokeAsync("_UILayoutHeadComponentPartial")

<body class="sub_page">

	@await Component.InvokeAsync("_MenuNavbarComponentPartial")
	<br />
	<br />
	<div class="container-fluid">
		<div class="row px-xl-5">
			<div class="col-12">
				<nav class="breadcrumb bg-dark mb-30">
					<a class="breadcrumb-item text-white" href="/Default/Index">Ana Sayfa</a>
					<a class="breadcrumb-item text-white" href="/Menu/Index">Menü</a>
					<span class="breadcrumb-item active">Siparişleriniz</span>
				</nav>
			</div>
		</div>
	</div>
	<div class="container-fluid">
		<div class="row px-xl-5">
			<div class="col-lg-12 table-responsive mb-5">
				<table class="table table-light table-borderless table-hover text-center mb-0">
					<thead class="thead-dark">
						<tr>
							<th>Sipariş Numarası</th>
							<th>Sipariş Tarihi</th>
							<th>Toplam Tutar</th>
							<th>Detaylar</th>
						</tr>
					</thead>
					<tbody class="align-middle">
						@foreach (var item in Model.Orders)
						{
							<tr>
								<td class="align-middle">@item.Id</td>
								<td class="align-middle">@item.CreatedDate.ToShortDateString()</td>
								<td class="align-middle">@item.TotalPrice₺</td>
								<td colspan="4">
									<div class="accordion" id="accordion-@item.Id">

										<div class="accordion-item" id="heading-@item.Id">
											<h2 class="accordion-header mb-0">
												<button class="btn btn-secondary btn-lg" type="button" data-toggle="collapse" data-target="#collapse-@item.Id" aria-expanded="true" style="font-family:'Times New Roman', Times, serif">
													Göster
												</button>
											</h2>
										</div>
										<div id="collapse-@item.Id" class="acccordion-collapse collapse" aria-labelledby="heading-@item.Id" data-parent="#accordion-@item.Id">
											<div class="card-body">
												<div class="col-log-12">
													<div class="bg-light p-30 mb-5">
														<div class="border-bottom pb-2">
															<table class="table table-bordered">
																<thead>
																<th>Ad</th>
																<th>Fiyat</th>

																</thead>
																@foreach (var order in Model.Orders)
																{
																	if (order.Id == item.Id)
																	{
																		if (order.MenuOrders != null)
																		{
																			foreach (var menuOrder in order.MenuOrders)
																			{
																				<tbody>
																					<tr>
																						<td>@menuOrder.Menu.Name</td>
																						<td>@menuOrder.Menu.Price₺ + KDV</td>
																					</tr>
																				</tbody>
																			}
																		}
																		if (order.BurgerOrders != null)
																		{
																			foreach (var burgerOrder in order.BurgerOrders)
																			{
																				<tbody>
																					<tr>
																						<td>@burgerOrder.Burger.Name</td>
																						<td>@burgerOrder.Burger.Price₺ + KDV</td>
																					</tr>
																				</tbody>
																			}
																		}

																		if (order.OrderByProducts != null)
																		{
																			foreach (var orderByProduct in order.OrderByProducts)
																			{
																				<tbody>
																					<tr>
																						<td>@orderByProduct.ByProduct.Name</td>
																						<td>@orderByProduct.ByProduct.Price₺ + KDV</td>
																					</tr>
																				</tbody>
																			}
																		}
																	}
																}
															</table>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
								</td>
							</tr>
						}
					</tbody>


				</table>
			</div>

		</div>
	</div>

	@await Component.InvokeAsync("_UILayoutFooterComponentPartial")

	@await Component.InvokeAsync("_UILayoutScriptComponentPartial")

</body>

</html>

@*<script>
	function toggleDetails(orderId) {
		var detailsDiv = document.querySelector('.details');
		var orderDetails = document.getElementById('order-details-' + orderId);

		if (orderDetails.style.display === 'none') {
			orderDetails.style.display = 'block';

		} else {
			orderDetails.style.display = 'none';
		}
	}
</script>*@

<!-- jQuery kütüphanesini dahil edin -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
	$(document).ready(function () {
		// Butona tıklama olayını dinleyip metni değiştirme
		$('.btn.btn-warning').click(function () {
			var buttonText = $(this).text();
			if (buttonText.trim() === 'Göster') {
				$(this).text('Kapat');
			} else {
				$(this).text('Göster');
			}
		});
	});
</script>

@functions {

	string GetProductName(dynamic item)
	{
		if (item.ByProduct != null)
		{
			return item.ByProduct.Name;
		}
		else if (item.Menu != null)
		{
			return item.Menu.Name;
		}
		else if (item.Burger != null)
		{
			return item.Burger.Name;
		}
		return "";
	}

	int GetQuantity(dynamic item)
	{
		if (item.ByProductQuantity > 0)
		{
			return item.ByProductQuantity;
		}
		else if (item.MenuQuantity > 0)
		{
			return item.MenuQuantity;
		}
		else if (item.BurgerQuantity > 0)
		{
			return item.BurgerQuantity;
		}
		return 0;
	}

	decimal GetPrice(dynamic item)
	{
		if (item.ByProduct != null)
		{
			return item.ByProduct.Price;
		}
		else if (item.Menu != null)
		{
			return item.Menu.Price;
		}
		else if (item.Burger != null)
		{
			return item.Burger.Price;
		}
		return 0;
	}

	string GetDetails(dynamic item)
	{
		if (item.ProductOrder != null)
		{
			return $"Ürün: {item.ByProduct.Name}  Adet: {item.ByProductQuantity}  Fiyat: {item.ByProduct.Price}";
		}
		else if (item.Menu != null)
		{
			return $"Ürün: {item.Menu.Name} Adet: {item.MenuQuantity} Fiyat: {item.Menu.Price}";
		}
		else if (item.Burger != null)
		{
			return $"Ürün: {item.Burger.Name} Adet: {item.BurgerQuantity}  Fiyat: {item.Burger.Price}";
		}
		return "";
	}
}